#!/usr/bin/env boot
;;-*- mode: Clojure; -*-

;; This requires Boot.
;; > brew install boot-clj

(set-env! :dependencies '[])
(require '[clojure.edn :as edn])
(require '[clojure.walk :as walk])
(require '[clojure.pprint :refer [pprint]])

(def projects ["voter-registration-works"
               "voter-registration-http-api" "election-works" "user-works"
               "user-http-api" "election-authority-works" "electorate-works"
               "address-works" "election-notification-http-api"
               "election-notification-works" "notification-works"
               "turbovote-web"
               "scheduled-message-works" "email-works" "sms-works" "krakenstein"])

(defn -main [dir]
  (assert (System/getenv "DATOMIC_USERNAME"))
  (assert (System/getenv "DATOMIC_PASSWORD"))
  (doto (java.io.File. dir)
    (.mkdir))
  (clojure.java.shell/with-sh-dir dir
    (let [procs (doall (for [project projects]
                         (future (clojure.java.shell/sh "git" "clone" (str "git@github.com:democracyworks/" project ".git")))))]
      (doseq [p procs]
        @p)))
  (doseq [project projects]
    (let [ip (-> "localdocker"
                 java.net.InetAddress/getByName
                 .getHostAddress)
          pf (clojure.java.io/file dir project "profiles.clj.sample")
          pr (clojure.java.io/file dir project "project.clj")]
      (when (.exists pf)
        (let [prof (edn/read (java.io.PushbackReader. (clojure.java.io/reader pf)))
              new-prof (-> prof
                           (assoc-in [:dev-overrides :repositories "my.datomic.com" :username] (System/getenv "DATOMIC_USERNAME"))
                           (assoc-in [:dev-overrides :repositories "my.datomic.com" :password]  (System/getenv "DATOMIC_PASSWORD")))]
          (spit (clojure.java.io/file dir project "profiles.clj")
                (with-out-str (pprint new-prof)))))
      (let [proj (edn/read (java.io.PushbackReader. (clojure.java.io/reader pr)))
            new-proj (concat
                      proj
                      [:mirrors {#"clojars" {:name "Artifactory Clojars"
                                             :url (str "http://" ip ":8080/artifactory/clojars")}
                                 #"central" {:name "Artifactory Central"
                                             :url (str "http://" ip ":8080/artifactory/maven-central")}}])]
        (spit pr (with-out-str (pprint new-proj))))
      (let [df (clojure.java.io/file dir project "Dockerfile")]
        (with-open [bf (clojure.java.io/reader df)]
          (let [lines (line-seq bf)
                new-lines (->> lines
                               (remove (partial re-find #"lein deps"))
                               (remove (partial re-find #"no-code-just-deps"))
                               (remove (partial re-find #"lein test")))]
            (spit df (clojure.string/join "\n" new-lines))))))))

